{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"PyTest Django Fullstack","text":""},{"location":"#purpose_of_this_book","title":"Purpose of this book","text":"<p>The original book 'PyTest Cookbook', https://pytest-cookbook.com/, had a section for Django Testing. It is worth using this as an additional resource as it contains many useful section on testing with PyTest and Toolbox utilities.</p> <p>Based on the scope of testing for Django, it seemed advantageous to create its own book.</p> <p>Testing will be done with PyTest as the runner and using PyTest tests. However, some tests will be based on the UnitTestCase built into Django.</p>"},{"location":"#contents","title":"Contents","text":""},{"location":"#review_of_django_docs","title":"Review of Django Docs","text":"<p>We will go through each part of the Django Testing section in the docs to extract the useful components for our PyTest suite. The <code>pytest-django</code> library uses all the Django test features so we do not lose any functionality.</p>"},{"location":"#pytest","title":"PyTest","text":"<p>We move into using PyTest and cover:</p> <ul> <li>Set up of PyTest Django</li> <li>Overview of included apps</li> <li>Explore the core tests for models, views and forms</li> <li>Dive deeper into SQL Schema tests for the models</li> <li>Test models, views and forms</li> <li>Test miscellaneous - Middleware, Template Tags, Admin Area etc</li> <li>Use Playwright for API testing</li> <li>Use Playwright for End To End testing</li> <li>Use of Factories and Mocks to support our testing</li> </ul> <p>The PyTest Framework will be useable 'out of the box' with over a 100 templated tests for your use.</p> <p></p>"},{"location":"django_docs/","title":"Django Docs","text":"<p>We look at essential items from the docs that will help with out PyTest Suite.</p>"},{"location":"django_docs/#testcase_hierarchy","title":"TestCase Hierarchy","text":""},{"location":"django_docs/#databases","title":"Databases","text":""},{"location":"django_docs/#requestfactory","title":"RequestFactory","text":"<p>Difference between using <code>client</code> and <code>RequestFactory</code></p>"},{"location":"introduction/","title":"Introduction","text":""},{"location":"introduction/#site_used","title":"Site used","text":"<ul> <li> <p>I have chosed a Django App that is freely available on a very popular YT channel, Traversy Media https://www.youtube.com/@TraversyMedia, that has a detailed video on its build by Dennis Ivy with an attached repo provided.</p> </li> <li> <p>The reason for this is that it creates the scenario of us testing a site we ourselves have not build and also provides explanations of how it was built.</p> </li> <li> <p>Video: https://www.youtube.com/watch?v=PtQiiknWUcI</p> </li> <li>Repo: https://github.com/divanov11/StudyBud/</li> </ul> <p>I have absorbed the repo into this test framework and made no changes other than adding tests.</p>"},{"location":"introduction/#additional_apps","title":"Additional apps","text":"<p>I have set up an <code>ecommerce</code> app which just serves as a basis for tests and has no website.</p> <p>This has FK and M2M tables for <code>Category</code>, <code>Product</code>, <code>Order</code>, <code>ProductCategory</code> and use <code>base.User</code>, from the StudyBud app, as well.</p>"},{"location":"introduction/#asides","title":"Asides","text":""},{"location":"introduction/#layers_of_test","title":"Layers of test","text":"<ul> <li>DB:SQL</li> <li>DB:ORM</li> <li>Models</li> <li>Views</li> <li>Forms</li> <li>Misc ltesting of Middleware, Admin, Template Tags etc</li> <li>API</li> <li>E2E</li> </ul>"},{"location":"introduction/#files_are_docs","title":"Files are docs","text":"<p>The files are heavily documented so that these are the articles on each topic.</p> <p>The book has its own articles.</p> <p></p>"},{"location":"motivation/","title":"Motivation","text":""},{"location":"motivation/#out_of_the_box","title":"Out of the box","text":"<p>Having repos that work out of the box is very important to me. I have endeavoured to ensure that installation and setup work every time.</p>"},{"location":"motivation/#comprehsive_yet_lean","title":"Comprehsive yet lean","text":"<p>It can be tempting to bloat the framework with a lot of information.</p> <p>I want the framework to be very lean without missing out on important aspects.</p> <p>Whilst this site has information on the framework, I have heavily commented the source files to provide both an article and code.</p>"},{"location":"motivation/#one_stop_shop","title":"One stop shop","text":""},{"location":"pytest_django/","title":"PyTest-Django","text":""},{"location":"pytest_django/#pytest_vs_testcase","title":"PyTest vs TestCase","text":"<p>When we use PyTest, (and PyTest-Django), we have all the functionality of TestCase as PyTest is built on top of it.</p> <p>We have the option to use both test libraries.</p>"},{"location":"pytest_django/#assertions","title":"Assertions","text":"<p>Whilst PyTest uses <code>assert</code> rather than say, <code>assertEqual</code>, PyTest-Django allows us to use all the assertions from TestCase:</p> <p></p> <p>https://pytest-django.readthedocs.io/en/latest/helpers.html</p> <pre><code>import pytest\nfrom pytest_django.asserts import assertTemplateUsed\n\n...\n\ndef test_should_use_correct_template_to_render_a_view(client):\n    response = client.get('.../your-url/')\n    assertTemplateUsed(response, 'template_name.html')\n</code></pre>"},{"location":"pytest_django/#use_of_db","title":"Use of DB","text":"<p>In TestCase, we can use the SimpleTestCase when a DB is not required. This can speed up tests.</p>"},{"location":"pytest_django/#admin_user_model","title":"Admin User Model","text":"<p>https://pytest-django.readthedocs.io/en/latest/helpers.html#id5</p>"},{"location":"pytest_django/#user_model","title":"User Model","text":"<p>https://pytest-django.readthedocs.io/en/latest/helpers.html#django-user-model</p>"},{"location":"pytest_django/#settings","title":"Settings","text":"<p>https://pytest-django.readthedocs.io/en/latest/helpers.html#settings</p>"},{"location":"pytest_django/#mailbox","title":"Mailbox","text":"<p>https://pytest-django.readthedocs.io/en/latest/helpers.html#mailoutbox</p> <p></p>"},{"location":"setup/","title":"Set up","text":""},{"location":"setup/#clone_test_suite","title":"Clone Test Suite","text":"<p>Clone the repo: https://github.com/Python-Test-Engineer/PyTest-Django-Full-Stack</p> <p>Create a virtual environment and activate:</p> <ul> <li><code>python -m venv venv</code></li> <li><code>.\\venv\\Scripts\\activate</code></li> <li><code>pip install -r requirements.txt</code></li> <li><code>playwright install</code> to load in Playwright browsers</li> <li><code>python -m pytest -vvvs</code> will run all the tests in a very verbose mode and one will see the DB etc being set up as part of <code>pytest-django</code>.</li> </ul>"},{"location":"setup/#how_it_was_built","title":"How it was built","text":"<p><code>pytest-django</code> installs <code>pytest</code>.</p> <p><code>playwright</code> used for E2E. Please note after installing <code>playwright</code> run <code>run playwright install</code> to load browsers.</p> <p><code>pytest-playwright</code></p> <p><code>django-extensions</code> is a utility we use. It is optional. The app needs to be installed in <code>settings.py</code>:</p> <pre><code>INSTALLED_APPS = [\n...\n'django_extensions',\n...\n]\n</code></pre> <p><code>rich</code> and <code>pyboxen</code> are used for console output.</p> <p><code>factory-boy</code> (installs <code>Faker</code>) for data generation.</p> <p>There is both a requirements.txt that lists the libraries needed at a top level, and a requirments_JUL2024.txt that has a <code>pip freeze</code> of all the libraries that got installed.</p>"},{"location":"setup/#add_pytestini","title":"Add pytest.ini","text":"<p>Add to pytest.ini</p> <p><code>DJANGO_SETTINGS_MODULE = studybud.settings</code> where <code>studybud</code> is name of root app where settings.py resides.</p>"},{"location":"setup/#add_log_folder","title":"Add log folder","text":"<p>Optional</p> <p><code>pytest.ini</code> is configured to set up logging to <code>log</code> in the root of the project as well as custom formatting. Change to suit.. </p>"},{"location":"setup/#config_setup","title":"Config setup","text":"<p>Optional</p> <p>This is a convenience utility and not required.</p> <p>The <code>config</code> folder and <code>utils/read_config.py</code> can be used to read config settings in the config folder.</p> <p>We use this to load settings when we test APIs and E2E.</p>"},{"location":"setup/#remove_testspy","title":"Remove tests.py","text":"<p>To avoid conflicts that I have encountered, remove all tests.py files in any apps and use a tests folder to hold test files, either in one central folder in the project or in the apps themselves.</p> <p>As the focus of this project is testing rather than the apps, I felt it was of more use to have all the tests with all the sub folders for areas of testing in one location.</p> <p></p>"},{"location":"setup/#test_set_up","title":"Test set up","text":"<p>Run <code>python -m pytest -vs tests/00_setup</code> and all tests in <code>tests/00_setup</code> folder should pass for setup, logging and config. This will ensure the framework is wired up correctly.</p> <p>Logging will register some events.</p> <p><code>read_config.py</code> should also pass.</p> <p></p>"},{"location":"craig/contact/","title":"Contact me","text":"<p>Email: iwswordpress@gmail.com</p> <p>LinkedIn: Craig West</p>"},{"location":"craig/courses/","title":"Online courses","text":""},{"location":"craig/courses/#udemycom","title":"Udemy.com","text":"<p>The course Udemy Hooks and Plugins course has just been published and Udemy has a sale ever two weeks and the cost would be $20 USD approx.</p> <p></p> <p>I am currently developing two courses:</p> <ul> <li>Python - mock, patch and monkeypatch.</li> <li>PyTest Django Full Stack - a DB &lt;-&gt; E2E testing of a generic ecommerce store.</li> </ul> <p>The aim is to make them generic, ready to go templates, that also dive deeper into aspects of Python.</p> <p>I am of the opinion that as developers we do not need to reinvent the wheel - it has (almost) all been done before - and that we should be free to use our creativity to build great proucts.</p> <p>The type of course I would want...</p> <p></p>"},{"location":"craig/cv/","title":"CV","text":""},{"location":"craig/cv/#github_cv","title":"GitHub CV","text":"<p>I use GitHub to host a copy of my CV.</p> <p>Github CV</p>"},{"location":"craig/cv/#python_backend_and_test_automation_engineer","title":"Python Backend and Test Automation Engineer","text":"<ul> <li>Degree in Chemistry, Oxford University.</li> <li>Former A+ PC Technician, Microsoft Certified Systems Engineer and Microsoft Certified SQL Server DBA.</li> <li>Former Business Information Architect.</li> <li>Qualified Accountant Technician and business owner.</li> <li>Experience with REST APIs, GraphQL, React, Vue, Web Components, Node, Docker</li> <li>Talks and workshops given at WordCamps, MeetUps and NDC.</li> </ul>"},{"location":"craig/cv/#talks_and_workshops","title":"Talks and Workshops","text":"<p>A list of talks and workshops I have given: </p> <ul> <li> <p>TALK: Offline and instant websites, aka Progressive Web Apps - AsyncJS, Brighton, September 2021.</p> </li> <li> <p>LIGHTNING TALK: WordPress as a Micro Service to any framework - WordFest, July 2021.</p> </li> <li> <p>TALK: WP REST API and Web Components =&gt; 100% Internet - WordCamp Santa Clarita, July 2021.</p> </li> <li> <p>TALK: Web Components in WP, Gutenberg and as HTML plugins. - WordCamp North East Ohio May 2021.</p> </li> <li> <p>TALK: Leveraging the power or the WordPress REST API - WP Leeds April 2021</p> </li> <li> <p>WORKSHOP: WP REST API and you -&gt; Best Friends Forever workshop (90 mins) - WordCamp Greece April 2021 </p> </li> <li> <p>TALK: Web Components as Micro Apps - NDC London, Jan 2021</p> </li> <li> <p>TALK: Unifying frameworks with Web Components - Brighton AsyncJS, Nov 2020</p> </li> <li> <p>WORKSHOP: Progressive Web Apps Workshop (2hrs) - NDC Oslo June 2020 and a paid training workshop with NDC</p> </li> <li> <p>WORKSHOP: Web Components Workshop (2hrs) - NDC Oslo June 2020 and a paid training workshope with NDC</p> </li> <li> <p>WORKSHOP: Progressive Web Apps Workshop (2hrs) - Brighton WordUp June 2020</p> </li> <li> <p>WORKSHOP: WordPress REST API with AJAX Forms and Pages - WordCamp Denver, June 2020.</p> </li> <li> <p>WORKSHOP: WordPress REST API with AJAX Forms and Pages - WordCamp Kent, Ohio May 2020.</p> </li> <li> <p>TALK: What is the WP REST API and how can I use it to make forms and pages that don\u2019t need to do be reloaded? - WordUp Brighton May 2020.</p> </li> <li> <p>WORKSHOP: WordPress REST API and AJAX Forms - WordCamp Geneva March 2020 EVENT CANCELLED due to virus concerns </p> </li> <li> <p>TALK - WP-HTML: The marriage of WP and JS Frameworks for expansion, ubiquity and profit - WordCamp Vienna February 2020.</p> </li> <li> <p>WORKSHOP: WordPress REST API - WordCamp Vienna February 2020.</p> </li> <li> <p>TALK: Progressive Web Apps - Brighton WordUp November 2019.</p> </li> <li> <p>TALK: Decoupled WordPress (code along style) - WordCamp Dublin October 2019.</p> </li> <li> <p>TALK: JWT and Authentication - WPHooked London September 2019</p> </li> <li> <p>TALK: Decoupled WordPress and WP Components - WordCamp Brighton August 2019.</p> </li> </ul>"},{"location":"craig/cv/#published_udemy_courses","title":"Published Udemy Courses","text":"<p>Udemy is a great learning platform and having sales at least once a month, courses can be purchased for ~ \u00a315/$15 USD.</p> <p>These have now been retired.</p> <ul> <li>WordPress REST API and AJAX Forms/Pages - DEMO https://www.youtube.com/watch?v=eubhbcGH_Ws&amp;t=6s (paid)</li> <li>Progressive Web Apps - DEMO https://www.youtube.com/watch?v=k_lHvNL0gkw (paid)</li> <li>WP-HTML: decoupling WordPress to any HTML platform using Web Components and the WP REST API. This also enables HTML plugins for non-WP Sites - https://www.udemy.com/course/powerful-html-pages-using-wordpress-component-architecture/ (free)</li> <li>Stylish Dynamic Web Forms with jQuery validation - https://www.udemy.com/course/ready-to-use-form-validation-templates-with-jquery/ (free)</li> </ul>"},{"location":"craig/cv/#youtube_courses_-_developer_to_developer_courses","title":"YouTube Courses - Developer to Developer courses","text":"<p>These are video courses that cover work through official documents to help other developers, learn in public and show prosepective employers not just what I know but how I learn and how I communicate technical matters to others.</p> <p>There are also some specific videos explaining solutions to set ups other developers may encounter.</p> <ul> <li> <p>HIGHLY-FUNCTIONAL-WEBCOMPONENTS: A video course based on the workshop I gave at NDC Oslo June 2020 - https://www.youtube.com/watch?v=QC-JTqQTv2k&amp;list=PLsszRSbzjyvkQwzrJobroRl7z7MfSlePa </p> </li> <li> <p>WP Plugin Boilerplate:  I havea video series to explain WP Plugin Boilerplate using a scaffolded out project that demonstrates the use of MySQL, wp_nonce, REST API, forms and how to redirect pages to plugin templates to make the plugin theme independent. https://www.youtube.com/watch?v=lJ9ktD4JOfs&amp;list=PLsszRSbzjyvn-RQr4dEjrgnTne2HcJKee</p> </li> </ul>"},{"location":"craig/cv/#volunteering","title":"Volunteering","text":"<p>I volunteer at Codebar.io in Brighton as well as some Community Kitchens.</p>"},{"location":"craig/cv/#outside_interests","title":"Outside interests","text":"<p>These include Community Kitchens, gym, occasional partner dancing and DIY.</p> <p></p>"},{"location":"craig/services/","title":"Services provided","text":""},{"location":"craig/services/#skillset","title":"Skillset","text":"<p>Primarily:</p> <ul> <li>Python</li> <li>PyTest</li> <li>Playwright</li> <li>Django</li> </ul> <p>Tools:</p> <p>I strive to dive deeper into these tools and see them as programming languages in their own right. DevOps seems to be an essential part of my work:</p> <ul> <li>Shell Scripting</li> <li>Git/GitHub Actions</li> <li>Docker</li> </ul>"},{"location":"craig/services/#engagement_style","title":"Engagement Style","text":"<p>I offer on-demand, freelance services starting from 1/2 day blocks.</p> <p>As and when you need it...</p> <p>Tech is a way of life for me not just a job and I strive to have enthusiasm and passion for the projects I work on. Professional fulfilment is paramount.</p>"},{"location":"craig/services/#eligibility","title":"Eligibility","text":"<ul> <li>UK National</li> <li>Fluent English</li> </ul>"},{"location":"craig/services/#on-sitehybrid","title":"On-site/Hybrid","text":"<p>I am based in Brighton and enjoy (local) on-site work as well as working from my home office.</p>"},{"location":"craig/services/#volunteer_coach","title":"Volunteer Coach","text":"<p>I am a volunteer coach with Codebar Brighton.</p>"},{"location":"craig/services/#youtube","title":"YouTube","text":"<p>I produce a large amount of content that is associated with a repo that enables 'out of the box' ease of use.</p> <p>If I find good videos without a repo, I often create a repo and my own video with reference to the source video. I have no commercial interest in this matter.</p> <p>My YouTube Channel</p>"},{"location":"craig/services/#outside_of_tech","title":"Outside of tech...","text":"<p>I enjoy working in community kitchens and love laughter, creating, doing and trying to work out why things are funny.</p> <p></p>"},{"location":"tests_used/api/","title":"API","text":""},{"location":"tests_used/db_orm/","title":"DB ORM","text":""},{"location":"tests_used/db_sql/","title":"DB SQL","text":""},{"location":"tests_used/e2e/","title":"E2E","text":""},{"location":"tests_used/forms/","title":"Forms","text":""},{"location":"tests_used/middleware/","title":"Middleware","text":""},{"location":"tests_used/misc/","title":"Miscellaneous","text":""},{"location":"tests_used/models/","title":"DB Models","text":""},{"location":"tests_used/overview/","title":"Overview","text":""},{"location":"tests_used/overview/#cli","title":"CLI","text":"<p><code>-p no:logging</code> stops console logging.</p> <p>This can be added as an <code>addopts</code> in the <code>pytest.ini</code> file to be a default.</p> <pre><code>addopts = \n    --strict-markers \n    -p no:warnings\n    -p no:logging\n</code></pre>"},{"location":"tests_used/overview/#-vvv","title":"-vvv","text":"<p>This is the highest level of verbosity <code>-vvv</code> and will show us how migrations and permissions are set for a test when using the DB:</p> <p></p>"},{"location":"tests_used/views/","title":"Views","text":""}]}